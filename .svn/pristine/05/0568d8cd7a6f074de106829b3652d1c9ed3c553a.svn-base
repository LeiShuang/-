package com.zfsoft.zfsoft_product.base;

import android.app.Activity;
import android.content.Context;
import android.support.multidex.MultiDex;

import com.lzy.imagepicker.ImagePicker;
import com.lzy.imagepicker.view.CropImageView;
import com.mob.MobSDK;
import com.scwang.smartrefresh.layout.footer.ClassicsFooter;
import com.scwang.smartrefresh.layout.header.ClassicsHeader;
import com.vondear.rxtool.RxTool;
import com.zfsoft.zfsoft_product.R;
import com.zfsoft.zfsoft_product.di.AppComponent;
import com.zfsoft.zfsoft_product.di.DaggerAppComponent;
import com.zfsoft.zfsoft_product.modules.report.submit_report.GlideImageLoader;
import com.zfsoft.zfsoft_product.utils.Utils;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import cn.sharesdk.framework.ShareSDK;
import cn.sharesdk.wechat.friends.Wechat;
import dagger.android.AndroidInjector;
import dagger.android.support.DaggerApplication;

/**
 * 创建日期：2018/12/24 on 10:08
 * 描述:程序入口
 * 作者:Ls
 */
public class BaseApplication extends DaggerApplication{
    //您从控制台申请的licence url
    String ugcLicenceUrl = "http://license.vod2.myqcloud.com/license/v1/43cc4f0a4db44d0297301b47ab65c0b6/TXUgcSDK.licence";

    //
    String ugcKey = "1378eda7f7129aac1c8267b44c7d5f8f";
    private static BaseApplication mInstance;
    private static List<Activity> activityList = new LinkedList<Activity>();
    private static AppComponent mAppComponent;
    private ImagePicker imagePicker;
    @Override
    protected AndroidInjector<? extends DaggerApplication> applicationInjector() {
        mAppComponent = DaggerAppComponent.builder().application(this).build();
        return mAppComponent;
    }

    public static BaseApplication getInstance() {
        return mInstance;
    }
    public void addActivity(Activity activity)  {
        activityList.add(activity);
    }
    public void removeActivity(Activity activity){
        activityList.remove(activity);
    }
    public void exitAllActivity(){
        for(Activity activity:activityList) {
            activity.finish();
        }
    }
    /**
     * 获取AppComponent实例
     * */
    public static  AppComponent getAppComponent(){
        return mAppComponent;
    }
    @Override
    public void onCreate() {
        super.onCreate();
        //shareSDK分享初始化
        MobSDK.init(this);
        //   initWeChat();
        Utils.init(this);

        //RxTool初始化
        RxTool.init(this);
        mInstance = this;

        initImagePicker();

        initLiveVedio();

    }
    /**
     * 初始化小视频
     * */
    private void initLiveVedio() {
      /* TXUGCBase.getInstance().setLicence(this, ugcLicenceUrl, ugcKey);
        String string = TXUGCBase.getInstance().getLicenceInfo(this);
        RxLogTool.d("TXUGCBase", "string=" + string);*/

    }

    private void initImagePicker() {

        ImagePicker imagePicker = ImagePicker.getInstance();
        imagePicker.setImageLoader(new GlideImageLoader());   //设置图片加载器
        imagePicker.setShowCamera(false);                      //显示拍照按钮
        imagePicker.setCrop(true);                           //允许裁剪（单选才有效）
        imagePicker.setSaveRectangle(true);                   //是否按矩形区域保存
        imagePicker.setSelectLimit(8);              //选中数量限制
        imagePicker.setStyle(CropImageView.Style.RECTANGLE);  //裁剪框的形状
        imagePicker.setFocusWidth(800);                       //裁剪框的宽度。单位像素（圆形自动取宽高最小值）
        imagePicker.setFocusHeight(800);                      //裁剪框的高度。单位像素（圆形自动取宽高最小值）
        imagePicker.setOutPutX(800);                         //保存文件的宽度。单位像素
        imagePicker.setOutPutY(800);                         //保存文件的高度。单位像素
    }


    /**
     * 修改SmartRefresh样式
     * */
    private void initSmartRefresh() {
        ClassicsHeader.REFRESH_HEADER_PULLING = getString(R.string.header_pulling);//"下拉可以刷新";
        ClassicsHeader.REFRESH_HEADER_REFRESHING = getString(R.string.header_refreshing);//"正在刷新...";
        ClassicsHeader.REFRESH_HEADER_LOADING = getString(R.string.header_loading);//"正在加载...";
        ClassicsHeader.REFRESH_HEADER_RELEASE = getString(R.string.header_release);//"释放立即刷新";
        ClassicsHeader.REFRESH_HEADER_FINISH = getString(R.string.header_finish);//"刷新完成";
        ClassicsHeader.REFRESH_HEADER_FAILED = getString(R.string.header_failed);//"刷新失败";
        ClassicsHeader.REFRESH_HEADER_UPDATE = getString(R.string.header_update);//"上次更新 M-d HH:mm";


        ClassicsFooter.REFRESH_FOOTER_PULLING = getString(R.string.footer_pulling);//"上拉加载更多";
        ClassicsFooter.REFRESH_FOOTER_RELEASE = getString(R.string.footer_release);//"释放立即加载";
        ClassicsFooter.REFRESH_FOOTER_LOADING = getString(R.string.footer_loading);//"正在刷新...";
        ClassicsFooter.REFRESH_FOOTER_REFRESHING = getString(R.string.footer_refreshing);//"正在加载...";
        ClassicsFooter.REFRESH_FOOTER_FINISH = getString(R.string.footer_finish);//"加载完成";
        ClassicsFooter.REFRESH_FOOTER_FAILED = getString(R.string.footer_failed);//"加载失败";
        ClassicsFooter.REFRESH_FOOTER_NOTHING = getString(R.string.footer_nothing);//"全部加载完成";
    }

    private void initWeChat() {
        HashMap<String,Object> hashMap = new HashMap<String, Object>();
        hashMap.put("Id","1");
        hashMap.put("SortId","1");
        hashMap.put("AppId","wxadc2f39cdfc88fe7");
        hashMap.put("AppSecret","e4e16c5ce5acfa9abf480a102de94d5e");
        hashMap.put("BypassApproval","false");
        hashMap.put("UserName","gh_afb25ac019c9");
        hashMap.put("Path","pages/index/index.html?id=1");
//        hashMap.put("ShareByAppClient","true");
        hashMap.put("Enable","true");
        ShareSDK.setPlatformDevInfo(Wechat.NAME,hashMap);
    }

    @Override
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(base);
        MultiDex.install(this);
    }
}
