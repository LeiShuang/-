package com.zfsoft.zfsoft_product.modules.try_use.try_use_detail;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.widget.NestedScrollView;
import android.text.Html;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.JavascriptInterface;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.shuyu.gsyvideoplayer.utils.OrientationUtils;
import com.shuyu.gsyvideoplayer.video.StandardGSYVideoPlayer;
import com.vondear.rxtool.RxActivityTool;
import com.vondear.rxtool.RxLogTool;
import com.youth.banner.Banner;
import com.youth.banner.BannerConfig;
import com.zfsoft.zfsoft_product.R;
import com.zfsoft.zfsoft_product.base.BaseFragment;
import com.zfsoft.zfsoft_product.common.Config;
import com.zfsoft.zfsoft_product.di.ActivityScoped;
import com.zfsoft.zfsoft_product.entity.ProductInfo;
import com.zfsoft.zfsoft_product.entity.SignBean;
import com.zfsoft.zfsoft_product.entity.ThingsInfoEntity;
import com.zfsoft.zfsoft_product.modules.login.LoginActivity;
import com.zfsoft.zfsoft_product.modules.login.info.SetInfoActivity;
import com.zfsoft.zfsoft_product.modules.personal.account_address.AccountAddressActivity;
import com.zfsoft.zfsoft_product.utils.DbHelper;
import com.zfsoft.zfsoft_product.utils.GlideImageLoader;
import com.zfsoft.zfsoft_product.utils.ShareUtils;
import com.zfsoft.zfsoft_product.utils.ToastUtils;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.Unbinder;
import cn.iwgang.countdownview.CountdownView;

/**
 * 创建日期：2019/1/12 on 14:23
 * 描述:产品详情fragment
 * 作者:Ls
 */
@ActivityScoped
public class ProductDetailFragment extends BaseFragment implements View.OnClickListener, TryUseDetailContract.UseDetailView {
    @BindView(R.id.report_detail_banner)
    Banner mReportDetailBanner;
    @BindView(R.id.tv_use_title)
    TextView mTvUseTitle;
    @BindView(R.id.tv_thing_size)
    TextView mTvThingSize;
    @BindView(R.id.tv_thing_price)
    TextView mTvThingPrice;
    @BindView(R.id.tv_number)
    TextView mTvNumber;
    @BindView(R.id.tv_person_number)
    TextView mTvPersonNumber;

    @BindView(R.id.tv_try_use_detail_share)
    TextView mTvTryUseDetailShare;
    @BindView(R.id.tv_try_sue_detail_get)
    TextView mTvTrySueDetailGet;
    @BindView(R.id.iv_product_like)
    ImageView mIvProductLike;
    @BindView(R.id.tv_simple_title)
    TextView mTvSimpleTitle;
    @BindView(R.id.rl_share_gift)
    RelativeLayout mRlShareGift;
    @BindView(R.id.view_divider)
    View mViewDivider;
    @BindView(R.id.scroll)
    NestedScrollView mScroll;
    @BindView(R.id.count_down_time)
    CountdownView mCountDownTime;
    @BindView(R.id.super_player)
    StandardGSYVideoPlayer mSuperPlayer;
    @BindView(R.id.tv_nointroduction)
    TextView mTvNointroduction;
    @BindView(R.id.webview)
    WebView mWebview;
    @BindView(R.id.ll_webview)
    LinearLayout mLlWebview;



    private int mCollectType = 1;
    private ProductInfo mInfo;
    private String mThingsId;
    private OrientationUtils mOrientationUtils;
    private String mRealMp4Url;
    private String mGetType;
    private boolean mHasLogin;

    @Inject
    public ProductDetailFragment() {

    }

    @Inject
    TryUseDetailPresenter mPresenter;

    public static ProductDetailFragment newInstance(String index) {
        Bundle args = new Bundle();
        args.putString("thingsId", index);
        ProductDetailFragment fragment = new ProductDetailFragment();
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    protected int getLayoutResID() {
        return R.layout.fragment_producet_detail;
    }

    @Override
    protected void initVariables() {
        mHasLogin = DbHelper.checkUserIsLogin(mContext);
    }

    @Override
    protected void handleBundle(Bundle bundle) {
        mThingsId = bundle.getString("thingsId");
    }

    @Override
    protected void operateViews(View view) {
        mPresenter.getProductsDetails(Config.HSK, mThingsId, DbHelper.getUserId(mContext));
        WebSettings settings = mWebview.getSettings();
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);//把html中的内容放大webview等宽的一列中
        settings.setJavaScriptEnabled(true);//支持js
        settings.setUseWideViewPort(true);
        settings.setLoadWithOverviewMode(true);
        mWebview.setWebViewClient(new MyWebViewClient());

    }

    private class MyWebViewClient extends WebViewClient {
        @Override public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            imgReset();//重置webview中img标签的图片大小 // html加载完成之后，添加监听图片的点击js函数
          //   addImageClickListner();
           }
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            view.loadUrl(url);
            return true;
        }
        /**
         * 对图片进行重置大小，宽度就是手机屏幕宽度，高度根据宽度比便自动缩放
         **/
        private void imgReset() {
            mWebview.loadUrl("javascript:(function(){" + "var objs = document.getElementsByTagName('img'); " +
                    "for(var i=0;i<objs.length;i++)  " + "{" + "var img = objs[i];   " +
                    "    img.style.maxWidth = '100%'; img.style.height = 'auto';  " +
                    "}" + "})()"
            );
        }


    }

    @Override
    public void onStart() {
        super.onStart();
        mReportDetailBanner.startAutoPlay();

    }

    @Override
    public void onStop() {

        super.onStop();
        mReportDetailBanner.stopAutoPlay();
    }

    @Override
    protected void initListener() {
        mRlShareGift.setOnClickListener(this);
        mTvTrySueDetailGet.setOnClickListener(this);
        mIvProductLike.setOnClickListener(this);
    }


    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public void initPresenter() {
        mPresenter.takeView(this);
    }

    @Override
    public void onClick(View v) {
        int key = v.getId();
        if (key == R.id.rl_share_gift) {
            if (mHasLogin) {
                //分享得积分
                ShareUtils.setShareInfo(mContext);
            } else {
                //未登录
                ToastUtils.showCenterToast(getContext(), "请先登录");
                RxActivityTool.skipActivity(mContext, LoginActivity.class);
            }


        } else if (key == R.id.tv_try_sue_detail_get) {
            if (mHasLogin) {
                if ("2".equals(mGetType) || "-1".equals(mGetType)) {
                    //立即申请
                    AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
                    builder.setTitle("是否申请此商品?")
                            .setPositiveButton("立即申请", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    mPresenter.tryUseProDuct(Config.HSK, mThingsId, DbHelper.getUserId(mContext));
                                }
                            }).setNegativeButton("取消申请", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            ToastUtils.showCenterToast(getContext(), getString(R.string.cancel_get));
                        }
                    });
                    builder.show();
                } else {
                    ToastUtils.showCenterToast(getContext(), "请勿重复申请");
                }

            } else {
                //未登录
                ToastUtils.showCenterToast(getContext(), "请先登录");
                RxActivityTool.skipActivity(mContext, LoginActivity.class);
            }

        } else if (key == R.id.iv_product_like) {
            if (mHasLogin) {
                mPresenter.collectProduct(Config.HSK, mThingsId, DbHelper.getUserId(getContext()), mCollectType);
            } else {
                //未登录
                ToastUtils.showCenterToast(getContext(), "请先登录");
                RxActivityTool.skipActivity(mContext, LoginActivity.class);
            }

        }
    }


    @Override
    public void getInfoSuccess(ThingsInfoEntity info) {
        if (info != null) {
            List<String> images = new ArrayList<>();
            for (int i = 0; i < info.getCommodityurls().size(); i++) {
                images.add(info.getCommodityurls().get(i).getCommodityurl());
            }
            String productIntroductionUrl = info.getCommodityintroduction();
            if (TextUtils.isEmpty(productIntroductionUrl)) {
                mTvNointroduction.setVisibility(View.VISIBLE);
                mLlWebview.setVisibility(View.GONE);
                mTvNointroduction.setText("暂无简介");

            } else {
                mTvNointroduction.setVisibility(View.GONE);
                mLlWebview.setVisibility(View.VISIBLE);
                mWebview.setVisibility(View.VISIBLE);
                mWebview.loadDataWithBaseURL(null, productIntroductionUrl, "text/html" , "utf-8", null);
            }
            mReportDetailBanner.setImages(images)
                    .setImageLoader(new GlideImageLoader())
                    .setBannerStyle(BannerConfig.NUM_INDICATOR)
                    .setDelayTime(5000)
                    .start();

            if (info.getHasstar().equals("1")) {
                mCollectType = 2;
                mIvProductLike.setImageResource(R.mipmap.ico_report_detail_liked);
            }
            mTvUseTitle.setText(info.getCommoditytitle());
            //"数量" + (TextUtils.isEmpty(info.getCommodityparameters())? "未知" :(
            mTvThingSize.setText(info.getCommodityparameters());

            mTvThingPrice.setText("售价: " + (TextUtils.isEmpty(info.getCommodityprice()) ? "暂无" : (info.getCommodityprice() + "元")));
            int second = info.getCommoditytime();
            if (!TextUtils.isEmpty(String.valueOf(second))) {
                mCountDownTime.start(Long.valueOf(String.valueOf(second) + "000"));
            }
            mTvNumber.setText("数量:" + (TextUtils.isEmpty(String.valueOf(info.getCommoditysum())) ? "未知" : String.valueOf(info.getCommoditysum())));
            mTvPersonNumber.setText("共" + String.valueOf(info.getCommodityapplicationsum()) + "人申请");
            mGetType = info.getApplytype();
            if ("0".equals(mGetType)) {
                //申请成功
                mTvTrySueDetailGet.setText("申请中");
                mTvTrySueDetailGet.setBackgroundResource(R.color.lightgray);
            } else if ("1".equals(mGetType)) {
                mTvTrySueDetailGet.setText("申请成功");
                mTvTrySueDetailGet.setBackgroundResource(R.color.lightgray);
            } else if ("2".equals(mGetType) || "-1".equals(mGetType)) {
                mTvTrySueDetailGet.setText("立即申请");
            }

            mRealMp4Url = info.getCommoditydetailsURL();
            if (TextUtils.isEmpty(mRealMp4Url)) {
                mRealMp4Url = "http://200024424.vod.myqcloud.com/200024424_709ae516bdf811e6ad39991f76a4df69.f20.mp4";
            }

            mSuperPlayer.setUp(mRealMp4Url, true, "默认视频");
            mOrientationUtils = new OrientationUtils(getActivity(), mSuperPlayer);
            //设置全屏按键功能,这是使用的是选择屏幕，而不是全屏
            mSuperPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    mOrientationUtils.resolveByClick();
                }
            });
            mSuperPlayer.setNeedShowWifiTip(true);
        }
    }

    @Override
    public void getInfoFailed(String errorMsg) {
        ToastUtils.showCenterToast(getContext(), errorMsg);
    }

    @Override
    public void collectSuccess(SignBean info) {
        String collectType = info.getMsgtype();
        if ("1".equals(collectType)) {
            if (mCollectType == 1) {
                ToastUtils.showCenterToast(getContext(), "收藏成功");
                mIvProductLike.setImageResource(R.mipmap.ico_report_detail_liked);
                mCollectType = 2;

            } else {
                ToastUtils.showCenterToast(getContext(), "取消收藏成功");
                mIvProductLike.setImageResource(R.mipmap.ico_report_like);
                mCollectType = 1;
            }

        } else if ("2".equals(collectType)) {

            if (mCollectType == 1) {
                ToastUtils.showCenterToast(getContext(), "收藏失败");
            } else {
                ToastUtils.showCenterToast(getContext(), "取消收藏失败");
            }
        } else if ("3".equals(collectType)) {
            if (mCollectType == 1) {
                mIvProductLike.setImageResource(R.mipmap.ico_report_detail_liked);
                ToastUtils.showCenterToast(getContext(), "已收藏");
            } else {
                mIvProductLike.setImageResource(R.mipmap.ico_report_like);
                ToastUtils.showCenterToast(getContext(), "已取消收藏");
            }
        }
    }

    @Override
    public void collectFailed(String errorMsg) {
        ToastUtils.showCenterToast(getContext(), "收藏失败");
    }

    @Override
    public void TryUseSuccess(SignBean info) {
        String tryuseType = info.getMsgtype();
        if ("1".equals(tryuseType)) {
            mTvTrySueDetailGet.setText("申请中");
            mTvTrySueDetailGet.setBackgroundResource(R.color.lightgray);
            ToastUtils.showCenterToast(getContext(), "提交申请成功");

        } else if ("2".equals(tryuseType)) {
            ToastUtils.showCenterToast(getContext(), "提交申请失败");
        } else if ("3".equals(tryuseType)) {

            ToastUtils.showCenterToast(getContext(), "请勿重复申请!");
        } else if ("4".equals(tryuseType)) {
            ToastUtils.showCenterToast(getContext(), "请先填写个人信息");
            mContext.startActivity(new Intent(getActivity(), SetInfoActivity.class));
            getActivity().finish();
        } else if ("5".equals(tryuseType)) {
            ToastUtils.showCenterToast(getContext(), "请先完善收货地址");
            mContext.startActivity(new Intent(getActivity(), AccountAddressActivity.class));
            getActivity().finish();
        } else {
            mTvTrySueDetailGet.setText("等待审核");
            mTvTrySueDetailGet.setBackgroundResource(R.color.lightgray);
            ToastUtils.showCenterToast(getContext(), "等待审核");
        }
    }

    @Override
    public void TryUseFailed(String errorMsg) {
        ToastUtils.showCenterToast(getContext(), errorMsg);
    }

    @Override
    public void onResume() {
        mSuperPlayer.onVideoResume();
        super.onResume();

    }

    @Override
    public void onPause() {
        mSuperPlayer.onVideoPause();
        super.onPause();
    }


    @Override
    public void onDestroy() {
        mSuperPlayer.release();
        if (mOrientationUtils != null) {
            mOrientationUtils.releaseListener();
        }
        super.onDestroy();

        mPresenter.dropView();
    }


}
